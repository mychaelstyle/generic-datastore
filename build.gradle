plugins {
      id "com.jfrog.bintray" version "1.4"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: "maven-publish"
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'

def defaultEncoding = 'utf-8'

sourceCompatibility = 1.7
targetCompatibility = 1.7
group 'com.mychaelstyle'
archivesBaseName = 'generic-datastore'
version = '0.2.0'

repositories {
  mavenCentral()
}

sourceSets {
  main {
    java {
        srcDir 'src/main/java'
    }
    resources {
        srcDir 'src/main/resources'
    }
  }
  test {
    java {
        srcDir 'src/test/java'
    }
    resources {
        srcDir 'src/test/resources'
    }
  }
}

dependencies {
  testCompile 'junit:junit:4.11'
  compile 'ch.qos.logback:logback-classic:1.1.2'
  compile 'ch.qos.logback:logback-core:1.1.2'
  compile 'org.json:json:20141113'
  compile 'com.amazonaws:aws-java-sdk:1.9.13'
  compile 'redis.clients:jedis:2.4.2'
}

findbugs {
  ignoreFailures = true
  toolVersion = "2.0.1"
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/findbugs")
  effort = "max"
//  reportLevel = "high"
//  visitors = ["FindSqlInjection", "SwitchFallthrough"]
//  omitVisitors = ["FindNonShortCircuit"]
//  includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
//  excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

pmd {
  ignoreFailures = true
  sourceSets = [sourceSets.main]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = [
    "basic",
    "braces"
  ]
}

check << {
  File outDir = new File('build/reports/pmd/')
  outDir.mkdirs()
  ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
    classpath: configurations.pmd.asPath)
  ant.cpd(minimumTokenCount: '100', format: 'xml', 
    outputFile: new File(outDir , 'cpd.xml')) {
    fileset(dir: "src/main/java") {
      include(name: '**/*.java')
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.2'
}

uploadArchives {
  repositories {
    mavenDeployer {
      file(System.getenv('HOME') + '/repositories/dev').mkdirs()
      repository(url: 'file:' + System.getenv('HOME') + '/repositories/dev')
    }
  }
}

publishing {
  publications {
    MyPublication(MavenPublication) {
      from components.java
      groupId 'com.mychaelstyle'
      artifactId 'generic-datastore'
      version '0.2.0'
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')

  configurations = ['archives']
  publications = ['MyPublication']

  dryRun = false
  publish = true

  pkg {
    repo = 'maven'
    name = 'generic-datastore'
    userOrg = ''
    desc = 'Data store wrapper for, MySQL, Redis, AWS DynamoDB..., JSON ORM'
    licenses = ['Apache-2.0']
    vcsUrl = 'git@github.com:mychaelstyle/generic-datastore.git'
    websiteUrl = 'https://github.com/mychaelstyle/generic-datastore'
    issueTrackerUrl = 'https://github.com/mychaelstyle/generic-datastore/issues'
    
    publicDownloadNumbers = true

    version {
      name = '0.2.0'
      desc = ''
      vcsTag = '0.2.0'
    }
  }
}


